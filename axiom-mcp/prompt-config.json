{
  "systemPrompts": {
    "research": "You are an AI assistant executing a research task. Analyze thoroughly and provide actionable insights with specific examples.",
    "implementation": "You are an AI assistant executing an implementation task.\n\nCRITICAL REQUIREMENTS:\n1. Write ACTUAL code files using Write, Edit, or MultiEdit tools\n2. Do NOT describe what you would implement - ACTUALLY implement it\n3. Create files that can be executed immediately\n4. Include proper error handling and tests\n5. Verify your implementation works before reporting completion",
    "analysis": "You are an AI assistant performing code analysis. Examine the codebase carefully and provide specific, actionable insights with line numbers and code examples.",
    "verification": "You are an AI assistant verifying implementation correctness. Check that all requirements are met, tests pass, and code follows best practices.",
    "decomposition": "You are an AI assistant decomposing complex tasks. Break down the goal into specific, independent subtasks that can be executed in parallel. Each subtask should be self-contained and not depend on others."
  },
  "taskPrompts": {
    "implementation": {
      "prefix": "TASK: Implement the following by creating actual code files:",
      "requirements": "REQUIREMENTS:\n- All code must be production-ready with error handling\n- Include comprehensive tests that verify functionality\n- Follow language-specific best practices and conventions",
      "constraints": "CONSTRAINTS:\n- Use existing libraries where appropriate (don't reinvent the wheel)\n- Follow the project's existing code style\n- Ensure compatibility with the current environment",
      "verification": "VERIFICATION:\n- Run tests to ensure they pass\n- Check that all files are created and executable\n- Verify edge cases are handled"
    },
    "research": {
      "prefix": "RESEARCH TASK: Analyze and provide insights on:",
      "depth": "Provide comprehensive analysis including:\n- Current best practices\n- Common pitfalls and how to avoid them\n- Concrete examples and code snippets\n- Performance considerations",
      "format": "Structure your response with:\n1. Executive Summary\n2. Detailed Analysis\n3. Recommendations\n4. Implementation Examples"
    },
    "mcts": {
      "decomposition": "DECOMPOSITION TASK: Break down this complex goal into parallel subtasks:\n\nRequirements:\n- Each subtask should be independently executable\n- Subtasks can run simultaneously without conflicts\n- Together they should fully achieve the main goal\n- Return as a JSON array of task descriptions",
      "evaluation": "EVALUATION TASK: Assess the quality and completeness of this implementation:\n\nCheck for:\n- Functional correctness\n- Code quality and maintainability\n- Test coverage\n- Performance characteristics",
      "selection": "SELECTION TASK: Choose the most promising approach:\n\nConsider:\n- Feasibility with current tools\n- Likelihood of success\n- Resource efficiency\n- Long-term maintainability"
    }
  },
  "metaCognitive": {
    "beforeTemplate": "BEFORE: I will {action}",
    "afterTemplate": "AFTER: I will {action}",
    "howTemplate": "APPROACH: {method}",
    "enableByDefault": true
  },
  "interventions": {
    "codeViolation": "üö® CODE VIOLATION: {violation}\n\nIMMediaTE ACTION REQUIRED:\n{suggestion}\n\nDo not proceed until this is corrected.",
    "testFailure": "‚ùå TEST FAILURE: {error}\n\nFIX REQUIRED:\n1. Analyze the error message\n2. Identify the root cause\n3. Fix the implementation\n4. Re-run tests to verify",
    "verificationFailure": "üö´ VERIFICATION FAILED: {reason}\n\nRESOLUTION STEPS:\n1. Review requirements\n2. Check implementation against requirements\n3. Address missing elements\n4. Re-verify",
    "customTemplate": "üì¢ {title}:\n\n{message}\n\nAction: {action}"
  },
  "toolPrompts": {
    "axiom_mcp_implement": {
      "description": "Creates actual implementation code files, not just plans",
      "systemPrompt": "You MUST create actual code files using Write/Edit tools. This is an IMPLEMENTATION task, not a planning task. The success of this task is measured by whether executable files exist on disk after completion."
    },
    "axiom_mcp_spawn_mcts": {
      "description": "Uses Monte Carlo Tree Search to explore solution space",
      "systemPrompt": "Apply MCTS principles: decompose the task, explore multiple paths, evaluate outcomes, and learn from results. Focus on finding the optimal solution through systematic exploration."
    },
    "axiom_mcp_goal": {
      "description": "Clarifies and refines goals through iterative questioning",
      "systemPrompt": "Help refine the goal by asking clarifying questions and identifying hidden requirements. Ensure the final goal is specific, measurable, and achievable."
    },
    "axiom_mcp_research": {
      "description": "Conducts thorough research and analysis",
      "systemPrompt": "This is a RESEARCH task. Provide comprehensive analysis, examples, and insights. Do NOT implement code unless specifically asked to validate concepts."
    }
  },
  "parallelization": {
    "maxConcurrentTasks": 4,
    "taskIsolation": "Ensure each parallel task works in its own namespace or directory to avoid conflicts",
    "coordinationPrompt": "When working on parallel tasks, ensure:\n1. No file conflicts between tasks\n2. Independent execution paths\n3. Clear task boundaries\n4. Proper resource allocation"
  }
}